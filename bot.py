import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters
)

# –ó–∞–º—ñ–Ω–∏ —Ü–µ–π —Ç–æ–∫–µ–Ω —Å–≤–æ—ó–º
BOT_TOKEN = "7561246127:AAEgKE1s61hM9d3si2eQ1gSECX5cMdC_-bM"

# –ì–ª–æ–±–∞–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏
user_data = {}  # username ‚Üí user_id
connected_users = {}  # user_id ‚Üí user_id

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# /start ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username:
        user_data[user.username.lower()] = user.id
        await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç, @{user.username}! –í–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ ‚úÖ")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î username ‚Äî –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ –≤ Telegram ‚ö†Ô∏è")

# /connect @username ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è
async def connect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/connect @username")
        return

    target_username = context.args[0].lstrip('@').lower()
    sender_id = update.effective_user.id

    if target_username not in user_data:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –Ω–µ –ø–∏—Å–∞–≤ –±–æ—Ç—É üòï")
        return

    receiver_id = user_data[target_username]

    connected_users[sender_id] = receiver_id
    connected_users[receiver_id] = sender_id

    await update.message.reply_text(f"üîó –í–∏ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏—Å—å –¥–æ @{target_username}")
    try:
        await context.bot.send_message(chat_id=receiver_id, text=f"üîó @{update.effective_user.username} –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ –≤–∞—Å")
    except Exception as e:
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", e)

# /stop ‚Äî —Ä–æ–∑'—î–¥–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    partner_id = connected_users.pop(user_id, None)

    if partner_id:
        connected_users.pop(partner_id, None)
        await context.bot.send_message(chat_id=partner_id, text="‚ùå –°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥.")
        await update.message.reply_text("–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥—ñ–∞–ª–æ–≥.")
    else:
        await update.message.reply_text("–í–∏ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

# –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def forward_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sender_id = update.effective_user.id
    partner_id = connected_users.get(sender_id)

    if partner_id:
        try:
            await context.bot.send_message(chat_id=partner_id, text=update.message.text)
        except Exception as e:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", e)
    else:
        await update.message.reply_text("–í–∏ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /connect")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("connect", connect))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
